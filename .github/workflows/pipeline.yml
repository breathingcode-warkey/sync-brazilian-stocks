name: Dynamic Lambda Deployment

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: npm install

      - name: Setup Environment Variables
        run: echo "PROJECT_NAME=${GITHUB_REPOSITORY#*/}" >> $GITHUB_ENV

      - name: Create Lambda ZIP
        run: zip -r ${{ env.PROJECT_NAME }}.zip src

      - name: Upload Lambda ZIP to S3
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: aws s3 cp ${{ env.PROJECT_NAME }}.zip s3://meu-unico-bucket-s3/${{ env.PROJECT_NAME }}.zip

      - name: Configure AWS credentials
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          aws configure set aws_access_key_id "$AWS_ACCESS_KEY_ID"
          aws configure set aws_secret_access_key "$AWS_SECRET_ACCESS_KEY"
          aws configure set default.region us-east-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.6

      - name: Terraform Init
        run: terraform init
        working-directory: terraform

      - name: Import and Apply Terraform
        env:
          TF_VAR_project_name: ${{ env.PROJECT_NAME }}
        run: |
          terraform import aws_s3_bucket.lambda_code_bucket meu-unico-bucket-s3 || echo "S3 bucket already managed"
          IAM_ROLE_ID="${{ env.PROJECT_NAME }}_execution_role"
          ROLE_EXISTS=$(aws iam get-role --role-name $IAM_ROLE_ID --query 'Role' --output text --no-cli-pager 2>/dev/null)
          
          if [ "$ROLE_EXISTS" != "None" ]; then
            echo "Role exists, importing..."
            terraform import aws_iam_role.lambda_execution_role $IAM_ROLE_ID || echo "IAM Role already managed"
          else
            echo "IAM Role doesn't exist."
          fi
          
          LAMBDA_ARN="arn:aws:lambda:us-east-1:${{ secrets.AWS_ACCOUNT_ID }}:function:${{ env.PROJECT_NAME }}"
          FUNCTION_EXISTS=$(aws lambda get-function --function-name "${{ env.PROJECT_NAME }}" --query 'Configuration.FunctionArn' --output text --no-cli-pager 2>/dev/null)
          
          if [ "$FUNCTION_EXISTS" != "None" ]; then
            echo "Lambda function exists, importing..."
            terraform import aws_lambda_function.my_lambda_function $LAMBDA_ARN || echo "Lambda function already managed"
          else
            echo "Lambda function doesn't exist."
          fi
          
          terraform import aws_cloudwatch_log_group.lambda_log_group "/aws/lambda/${{ env.PROJECT_NAME }}" || echo "Log group already managed"
          terraform apply -auto-approve
        working-directory: terraform
